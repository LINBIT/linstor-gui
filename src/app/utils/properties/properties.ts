// SPDX-License-Identifier: GPL-3.0
//
// Copyright (c) 2024 LINBIT
//
// Author: Liang Li <liang.li@linbit.com>

export const properties = {
  properties: {
    stordriver_pool_name: {
      key: ['NAMESPC_STORAGE_DRIVER', 'KEY_STOR_POOL_NAME'],
      type: 'regex',
      value: '[a-zA-Z0-9_/-]+',
      internal: true,
    },
    stordriver_volumegroup: {
      key: ['NAMESPC_STORAGE_DRIVER', 'KEY_STOR_POOL_VOLUME_GROUP'],
      type: 'regex',
      value: '[a-zA-Z0-9_-]+',
      internal: true,
    },
    stordriver_lvcreate_type: {
      key: ['NAMESPC_STORAGE_DRIVER', 'KEY_STOR_POOL_LVCREATE_TYPE'],
      type: 'symbol',
      default: 'linear',
      values: ['linear', 'striped', 'mirror', 'raid0', 'raid1', 'raid4', 'raid5', 'raid6', 'raid10', 'lzma', 'lz4'],
      internal: true,
    },
    stordriver_lvcreate_options: {
      key: ['NAMESPC_STORAGE_DRIVER', 'KEY_STOR_POOL_LVCREATE_OPTIONS'],
      type: 'regex',
      value: '.*',
      info: "Additional parameters added to every 'lvcreate ... ' command",
    },
    stordriver_thinpool: {
      key: ['NAMESPC_STORAGE_DRIVER', 'KEY_STOR_POOL_THIN_POOL'],
      type: 'regex',
      value: '[a-zA-Z0-9_-]+',
      internal: true,
    },
    stordriver_zpool: {
      key: ['NAMESPC_STORAGE_DRIVER', 'KEY_STOR_POOL_ZPOOL'],
      type: 'regex',
      value: '[a-zA-Z0-9_/-]+',
      internal: true,
    },
    stordriver_zpool_thin: {
      key: ['NAMESPC_STORAGE_DRIVER', 'KEY_STOR_POOL_ZPOOLTHIN'],
      type: 'regex',
      value: '[a-zA-Z0-9_/-]+',
      internal: true,
    },
    stordriver_zfs_create_options: {
      key: ['NAMESPC_STORAGE_DRIVER', 'KEY_STOR_POOL_ZFS_CREATE_OPTIONS'],
      type: 'regex',
      value: '.*',
      info: "Additional parameters added to every 'zfs create ... ' command",
    },
    stordriver_file_dir: {
      key: ['NAMESPC_STORAGE_DRIVER', 'KEY_STOR_POOL_FILE_DIRECTORY'],
      type: 'regex',
      value: '.*',
      internal: true,
    },
    stordriver_wait_timeout_after_create: {
      key: ['NAMESPC_STORAGE_DRIVER', 'KEY_STOR_POOL_WAIT_TIMEOUT_AFTER_CREATE'],
      type: 'regex',
      value: '[0-9]+',
      internal: true,
    },
    storage_pool_name: {
      key: ['KEY_STOR_POOL_NAME'],
      type: 'regex',
      value: '^[a-zA-Z0-9_][a-zA-Z0-9_-]{2,47}$',
      info: 'Linstor storage pool name to use.',
    },
    storage_pool_drbd_meta_name: {
      key: ['KEY_STOR_POOL_DRBD_META_NAME'],
      type: 'regex',
      value: '^|.internal|[a-zA-Z0-9_][a-zA-Z0-9_-]{2,47}$',
      info: 'Linstor storage pool name to use for external metadata.',
    },
    storage_pool_openflex_api_host: {
      key: ['NAMESPC_STORAGE_DRIVER', 'KEY_STOR_POOL_OPENFLEX_API_HOST'],
      type: 'regex',
      value: '.+',
      info: 'Openflex API host name',
    },
    storage_pool_openflex_api_port: {
      key: ['NAMESPC_STORAGE_DRIVER', 'KEY_STOR_POOL_OPENFLEX_API_PORT'],
      type: 'regex',
      value: '[0-9]+',
      info: 'Openflex API port',
    },
    storage_pool_openflex_stor_dev: {
      key: ['NAMESPC_STORAGE_DRIVER', 'KEY_STOR_POOL_OPENFLEX_STOR_DEV'],
      type: 'regex',
      value: '.+',
      info: 'Openflex storage device',
    },
    storage_pool_openflex_stor_dev_host: {
      key: ['NAMESPC_STORAGE_DRIVER', 'KEY_STOR_POOL_OPENFLEX_STOR_DEV_HOST'],
      type: 'regex',
      value: '.+',
      info: 'Openflex storage device host',
    },
    storage_pool_openflex_stor_pool: {
      key: ['NAMESPC_STORAGE_DRIVER', 'KEY_STOR_POOL_OPENFLEX_STOR_POOL'],
      type: 'regex',
      value: '[0-9]+',
      info: 'Openflex storage pool name',
    },
    storage_pool_openflex_user_name: {
      key: ['NAMESPC_STORAGE_DRIVER', 'KEY_STOR_POOL_OPENFLEX_USER_NAME'],
      type: 'regex',
      value: '.+',
      info: 'Openflex user name',
    },
    storage_pool_openflex_user_pw: {
      key: ['NAMESPC_STORAGE_DRIVER', 'KEY_STOR_POOL_OPENFLEX_USER_PW'],
      type: 'regex',
      value: '.+',
      info: 'Openflex password',
    },
    storage_pool_openflex_job_wait_max_count: {
      key: ['NAMESPC_STORAGE_DRIVER', 'KEY_STOR_POOL_OPENFLEX_JOB_WAIT_MAX_COUNT'],
      type: 'regex',
      value: '[0-9]+',
      info: 'Maximum retries with wait delay until openflex fails',
    },
    storage_pool_openflex_job_wait_delay: {
      key: ['NAMESPC_STORAGE_DRIVER', 'KEY_STOR_POOL_OPENFLEX_JOB_WAIT_DELAY'],
      type: 'regex',
      value: '[0-9]+',
      info: 'Delay in milliseconds linstor waits between fetching the job status',
    },
    storage_pool_exos_vlm_type: {
      key: ['NAMESPC_EXOS', 'KEY_STOR_POOL_EXOS_VLM_TYPE'],
      type: 'symbol',
      values: ['linear', 'virtual'],
      info: 'linear: Volumes are created from Disk Groups (vdisks), virtual: Volumes are created from Pools which is a set of Disk Groups (vdisks)',
    },
    storage_pool_exos_create_vlm_options: {
      key: ['NAMESPC_EXOS', 'KEY_STOR_POOL_EXOS_CREATE_VOLUME_OPTIONS'],
      type: 'string',
      info: 'Any additional parameters appended to /create/volume/pool/${poolName}/size/${size}KiB/${vlmName}',
    },
    storage_pool_exos_enclosure: {
      key: ['NAMESPC_EXOS', 'KEY_STOR_POOL_EXOS_ENCLOSURE'],
      type: 'string',
      info: 'Name of the Exos enclosure',
    },
    storage_pool_exos_pool_sn: {
      key: ['NAMESPC_EXOS', 'KEY_STOR_POOL_EXOS_POOL_SN'],
      type: 'string',
      info: 'Serial number of the Exos pool',
    },
    preferred_nic: {
      key: ['KEY_STOR_POOL_PREF_NIC'],
      type: 'regex',
      value: '^[a-zA-Z0-9_][a-zA-Z0-9_-]{2,47}$',
      info: 'Preferred network interface to use',
    },
    tcp_port_range: {
      key: ['KEY_TCP_PORT_AUTO_RANGE'],
      type: 'regex',
      value: '[0-9]+-[0-9]+',
      info: 'Range for auto-allocation of resource TCP ports',
    },
    minor_nr_range: {
      key: ['KEY_MINOR_NR_AUTO_RANGE'],
      type: 'regex',
      value: '[0-9]+-[0-9]+',
      info: 'Range for auto-allocation of volume minor numbers',
    },
    peer_slots_new_resource: {
      key: ['KEY_PEER_SLOTS_NEW_RESOURCE'],
      type: 'range',
      min: 1,
      max: 31,
      info: 'DRBD peer slots to allocate for newly created resources (default 7), the number of peer slots cannot be changed once the resource is created, so allow sufficient slots to increase redundancy in the future',
    },
    peer_slots: {
      key: ['KEY_PEER_SLOTS'],
      type: 'range',
      min: 1,
      max: 31,
      info: 'DRBD peer slots present on resource',
      internal: true,
    },
    dm_stats: {
      key: ['NAMESPC_STORAGE_DRIVER', 'KEY_DMSTATS'],
      type: 'boolean_true_false',
      info: 'Enable dmstats on lvm create',
    },
    override_vlm_id: {
      key: ['KEY_STOR_POOL_OVERRIDE_VLM_ID'],
      type: 'regex',
      value: '.*',
      info: "Overwrites the generated '<resource-name>_<5 digit volume number>' volume name for migration purposes",
    },
    max_oversubscription_ratio: {
      key: ['KEY_STOR_POOL_DFN_MAX_OVERSUBSCRIPTION_RATIO'],
      type: 'range',
      min: 1,
      max: 1000,
      info: 'Maximum allowed ratio of the sum of volume sizes in a thin pool to the total capacity of the pool (default 20)',
    },
    proxy_memlimit: {
      unit_prefix: '1',
      min: 16777216,
      default: 16777216,
      // eslint-disable-next-line no-loss-of-precision
      max: 9223372036854775807,
      drbd_option_name: 'memlimit',
      internal: true,
      key: 'DrbdOptions/Proxy/memlimit',
      type: 'range',
      unit: 'bytes',
    },
    proxy_read_loops: {
      unit_prefix: '1',
      min: 0,
      default: 0,
      max: 2147483647,
      drbd_option_name: 'read-loops',
      internal: true,
      key: 'DrbdOptions/Proxy/read-loops',
      type: 'range',
    },
    proxy_sndbuf_size: {
      unit_prefix: '1',
      min: 0,
      default: 0,
      max: 10485760,
      drbd_option_name: 'sndbuf-size',
      internal: true,
      key: 'DrbdOptions/Proxy/sndbuf-size',
      type: 'range',
      unit: 'bytes',
    },
    proxy_rcvbuf_size: {
      unit_prefix: '1',
      min: 0,
      default: 0,
      max: 10485760,
      drbd_option_name: 'rcvbuf-size',
      internal: true,
      key: 'DrbdOptions/Proxy/rcvbuf-size',
      type: 'range',
      unit: 'bytes',
    },
    proxy_ping_timeout: {
      unit_prefix: '1',
      min: 1,
      default: 200,
      max: 300,
      drbd_option_name: 'ping-timeout',
      internal: true,
      key: 'DrbdOptions/Proxy/ping-timeout',
      type: 'range',
      unit: '1/10 seconds',
    },
    proxy_compression_type: {
      internal: true,
      key: ['NAMESPC_DRBD_PROXY', 'KEY_DRBD_PROXY_COMPRESSION_TYPE'],
      type: 'symbol',
      values: ['zlib', 'lzma', 'lz4', 'zstd'],
    },
    proxy_compression_zstd_level: {
      internal: true,
      key: 'DrbdOptions/ProxyCompression/level',
      drbd_option_name: 'level',
      type: 'range',
      min: 1,
      default: 3,
      max: 22,
    },
    proxy_compression_zlib_level: {
      internal: true,
      key: 'DrbdOptions/ProxyCompression/level',
      drbd_option_name: 'level',
      type: 'range',
      min: 1,
      default: 2,
      max: 9,
    },
    proxy_compression_lzma_dict_size: {
      internal: true,
      key: 'DrbdOptions/ProxyCompression/dict-size',
      drbd_option_name: 'dict-size',
      type: 'range',
      min: 4096,
      default: 32768,
      max: 1610612736,
    },
    proxy_compression_lzma_lc: {
      internal: true,
      key: 'DrbdOptions/ProxyCompression/lc',
      drbd_option_name: 'lc',
      type: 'range',
      min: 0,
      default: 3,
      max: 4,
    },
    proxy_compression_lzma_lp: {
      internal: true,
      key: 'DrbdOptions/ProxyCompression/lp',
      drbd_option_name: 'lp',
      type: 'range',
      min: 0,
      default: 0,
      max: 4,
    },
    proxy_compression_lzma_pb: {
      internal: true,
      key: 'DrbdOptions/ProxyCompression/pb',
      drbd_option_name: 'pb',
      type: 'range',
      min: 0,
      default: 2,
      max: 4,
    },
    proxy_compression_lzma_nice_len: {
      internal: true,
      key: 'DrbdOptions/ProxyCompression/nice-len',
      drbd_option_name: 'nice-len',
      type: 'range',
      min: 0,
      default: 273,
      max: 273,
    },
    proxy_compression_lzma_mf: {
      internal: true,
      key: 'DrbdOptions/ProxyCompression/mf',
      drbd_option_name: 'mf',
      type: 'symbol',
      default: 'hc3',
      values: ['hc4', 'hc3', 'bt2', 'bt3', 'bt4'],
    },
    proxy_compression_lzma_mode: {
      internal: true,
      key: 'DrbdOptions/ProxyCompression/mode',
      drbd_option_name: 'mode',
      type: 'symbol',
      default: 'fast',
      values: ['fast', 'normal'],
    },
    proxy_compression_lzma_depth: {
      internal: true,
      key: 'DrbdOptions/ProxyCompression/depth',
      drbd_option_name: 'depth',
      type: 'range',
      min: 0,
      default: 0,
      max: 1000,
    },
    proxy_compression_lzma_level: {
      internal: true,
      key: 'DrbdOptions/ProxyCompression/level',
      drbd_option_name: 'level',
      type: 'range',
      min: 1,
      default: 4,
      max: 9,
    },
    proxy_compression_lzma_contexts: {
      internal: true,
      key: 'DrbdOptions/ProxyCompression/contexts',
      drbd_option_name: 'contexts',
      type: 'range',
      min: 1,
      default: 'thread count',
      max: 253,
    },
    proxy_compression_lzma_fallback_to_zlib: {
      internal: true,
      key: 'DrbdOptions/ProxyCompression/fallback-to-zlib',
      drbd_option_name: 'fallback-to-zlib',
      type: 'symbol',
      default: 'off',
      values: ['off', 'on'],
    },
    proxy_compression_lzma_numa_threshold: {
      internal: true,
      key: 'DrbdOptions/ProxyCompression/numa-threshold',
      drbd_option_name: 'numa-threshold',
      type: 'range',
      min: 0,
      default: 0,
      max: 253,
    },
    proxy_auto_enable: {
      internal: true,
      key: ['NAMESPC_DRBD_PROXY', 'KEY_DRBD_PROXY_AUTO_ENABLE'],
      type: 'boolean_true_false',
      default: 'false',
    },
    site: {
      internal: true,
      key: ['KEY_SITE'],
      type: 'string',
    },
    drbd_current_gi: {
      internal: false,
      key: ['KEY_DRBD_CURRENT_GI'],
      type: 'regex',
      value: '[a-fA-F0-9]{16}',
      info: 'Initial DRBD generation id, if initial sync is skipped, this ID will be set',
    },
    rest_disable_http_metrics: {
      internal: false,
      key: ['NAMESPC_REST', 'KEY_DISABLE_HTTP_METRICS'],
      info: 'Disable Prometheus /metrics on HTTP, if HTTPS is enabled',
      type: 'boolean_true_false',
    },
    nvme_tr_type: {
      internal: false,
      key: ['NAMESPC_NVME', 'KEY_TR_TYPE'],
      type: 'symbol',
      default: 'rdma',
      values: ['rdma', 'tcp'],
      info: 'NVMe transportation type',
    },
    nvme_port: {
      internal: false,
      key: ['NAMESPC_NVME', 'KEY_PORT'],
      type: 'range',
      min: 1,
      max: 65535,
      info: 'NVMe port',
    },
    nvme_preferred_nic: {
      internal: false,
      key: ['NAMESPC_NVME', 'KEY_PREF_NIC'],
      type: 'regex',
      value: '^[a-zA-Z0-9_][a-zA-Z0-9_-]{2,47}$',
      info: 'Preferred network interface to use',
    },
    fs_type: {
      internal: false,
      key: ['NAMESPC_FILESYSTEM', 'KEY_FS_TYPE'],
      info: 'File system type to use',
      type: 'symbol',
      values: ['ext4', 'xfs'],
    },
    fs_mkfsparameters: {
      internal: false,
      key: ['NAMESPC_FILESYSTEM', 'KEY_FS_MKFSPARAMETERS'],
      info: 'Additional parameters for the mkfs command',
      type: 'string',
    },
    sys_fs_blkio_throttle_read: {
      internal: false,
      key: ['NAMESPC_SYS_FS', 'KEY_SYS_FS_BLKIO_THROTTLE_READ'],
      info: 'Sets the /sys/fs/cgroup/blkio/blkio.throttle.read_bps_device',
      type: 'long',
    },
    sys_fs_blkio_throttle_write: {
      internal: false,
      key: ['NAMESPC_SYS_FS', 'KEY_SYS_FS_BLKIO_THROTTLE_WRITE'],
      info: 'Sets the /sys/fs/cgroup/blkio/blkio.throttle.write_bps_device',
      type: 'long',
    },
    sys_fs_blkio_throttle_read_iops: {
      internal: false,
      key: ['NAMESPC_SYS_FS', 'KEY_SYS_FS_BLKIO_THROTTLE_READ_IOPS'],
      info: 'Sets the /sys/fs/cgroup/blkio/blkio.throttle.read_iops_device',
      type: 'long',
    },
    sys_fs_blkio_throttle_write_iops: {
      internal: false,
      key: ['NAMESPC_SYS_FS', 'KEY_SYS_FS_BLKIO_THROTTLE_WRITE_IOPS'],
      info: 'Sets the /sys/fs/cgroup/blkio/blkio.throttle.write_iops_device',
      type: 'long',
    },
    search_domain: {
      internal: false,
      key: ['KEY_SEARCH_DOMAIN'],
      info: 'Search domain node names, if no FQDN is given.',
      type: 'string',
    },
    ext_cmd_wait_to: {
      internal: false,
      key: ['KEY_EXT_CMD_WAIT_TO'],
      info: 'Wait timeout for an external command in milliseconds',
      type: 'long',
    },
    auto_evict_after_time: {
      internal: false,
      key: ['NAMESPC_DRBD_OPTIONS', 'KEY_AUTO_EVICT_AFTER_TIME'],
      info: 'Time a node can be offline before it is declared EVICTED in minutes',
      type: 'long',
      default: 60,
    },
    auto_evict_max_disconnected_nodes: {
      internal: false,
      key: ['NAMESPC_DRBD_OPTIONS', 'KEY_AUTO_EVICT_MAX_DISCONNECTED_NODES'],
      info: 'Percentage(0-100) of nodes that can disconnect at the same time without the controller stopping the max_offline_time timer',
      type: 'range',
      min: 0,
      max: 100,
      default: 34,
    },
    auto_evict_min_replica_count: {
      internal: false,
      key: ['NAMESPC_DRBD_OPTIONS', 'KEY_AUTO_EVICT_MIN_REPLICA_COUNT'],
      info: 'The minimum amount of replicas that should be present for a resource at all times.',
      type: 'long',
      default: 'The place count set for the resource group',
    },
    auto_evict_allow_eviction: {
      internal: false,
      key: ['NAMESPC_DRBD_OPTIONS', 'KEY_AUTO_EVICT_ALLOW_EVICTION'],
      info: 'If set to false on a node, it cannot be evicted anymore',
      type: 'boolean_true_false',
      default: 'true',
    },
    drbd_auto_quorum: {
      internal: false,
      key: ['NAMESPC_DRBD_OPTIONS', 'KEY_DRBD_AUTO_QUORUM'],
      info: "Enables automatic setting of the 'quorum' and 'on-no-quorum' property",
      type: 'symbol',
      values: ['io-error', 'suspend-io', 'disabled'],
    },
    drbd_auto_add_quorum_tie_breaker: {
      internal: false,
      key: ['NAMESPC_DRBD_OPTIONS', 'KEY_DRBD_AUTO_ADD_QUORUM_TIEBREAKER'],
      info: 'Enables automatic management (creation and deletion) of tie breaking resource',
      type: 'boolean_true_false',
    },
    drbd_auto_diskful: {
      internal: false,
      key: ['NAMESPC_DRBD_OPTIONS', 'KEY_DRBD_AUTO_DISKFUL'],
      info: 'Makes a resource diskful if it was continuously diskless primary for X minutes',
      type: 'long',
    },
    drbd_auto_diskful_allow_cleanup: {
      internal: false,
      key: ['NAMESPC_DRBD_OPTIONS', 'KEY_DRBD_AUTO_DISKFUL_ALLOW_CLEANUP'],
      info: 'Allows this resource to be cleaned up after toggle-disk + resync is finished',
      type: 'boolean_true_false',
    },
    drbd_auto_verify_algo_disable: {
      internal: false,
      key: ['NAMESPC_DRBD_OPTIONS', 'KEY_DRBD_DISABLE_AUTO_VERIFY_ALGO'],
      info: 'If set to true it will disable automatic setting of DRBD verify algorithm',
      type: 'boolean_true_false',
    },
    drbd_auto_verify_algo_allowed_user: {
      internal: false,
      key: ['NAMESPC_DRBD_OPTIONS', 'KEY_DRBD_AUTO_VERIFY_ALGO_ALLOWED_USER'],
      info: 'A list of verify algorithms allowed by user, semicolon separated',
      type: 'string',
    },
    writecache_pool_name: {
      key: ['NAMESPC_WRITECACHE', 'KEY_WRITECACHE_POOL_NAME'],
      type: 'regex',
      value: '^[a-zA-Z0-9_][a-zA-Z0-9_-]{2,47}$',
      info: 'Linstor storage pool name for writecache',
    },
    writecache_size: {
      key: ['NAMESPC_WRITECACHE', 'KEY_WRITECACHE_SIZE'],
      type: 'regex',
      value: '^100%|[0-9]{1,2}([.][0-9]*)?%|[1-9][0-9]{2,}$',
      info: 'Size of the writecache in % (0-100) or KiB otherwise',
    },
    writecache_opt_start_sector: {
      key: ['NAMESPC_WRITECACHE_OPTIONS', 'KEY_WRITECACHE_OPTION_START_SECTOR'],
      type: 'long',
      info: 'offset from the start of cache device in 512-byte sectors',
      default: '0',
    },
    writecache_opt_high_watermark: {
      key: ['NAMESPC_WRITECACHE_OPTIONS', 'KEY_WRITECACHE_OPTION_HIGH_WATERMARK'],
      type: 'long',
      info: 'start writeback when the number of used blocks reach this watermark',
      default: '50',
    },
    writecache_opt_low_watermark: {
      key: ['NAMESPC_WRITECACHE_OPTIONS', 'KEY_WRITECACHE_OPTION_LOW_WATERMARK'],
      type: 'long',
      info: 'stop writeback when the number of used blocks drops below this watermark',
      default: '45',
    },
    writecache_opt_writeback_jobs: {
      key: ['NAMESPC_WRITECACHE_OPTIONS', 'KEY_WRITECACHE_OPTION_WRITEBACK_JOBS'],
      type: 'long',
      info: 'limit the number of blocks that are in flight during writeback. Setting this value reduces writeback throughput, but it may improve latency of read requests',
      default: 'unlimited',
    },
    writecache_opt_autocommit_blocks: {
      key: ['NAMESPC_WRITECACHE_OPTIONS', 'KEY_WRITECACHE_OPTION_AUTOCOMMIT_BLOCKS'],
      type: 'long',
      info: 'when the application writes this amount of blocks without issuing the FLUSH request, the blocks are automatically committed',
      default: '64 for pmem, 65536 for ssd',
    },
    writecache_opt_autocommit_time: {
      key: ['NAMESPC_WRITECACHE_OPTIONS', 'KEY_WRITECACHE_OPTION_AUTOCOMMIT_TIME'],
      type: 'long',
      info: 'autocommit time in milliseconds. The data is automatically committed if this time passes and no FLUSH request is received',
      default: '1000',
    },
    writecache_opt_fua: {
      key: ['NAMESPC_WRITECACHE_OPTIONS', 'KEY_WRITECACHE_OPTION_FUA'],
      type: 'symbol',
      values: ['On', 'Off'],
      info: '"On" results in "fua" as argument, whereas the value "Off" results in "nofua" argument',
      default: 'On',
    },
    writecache_opt_additional: {
      key: ['NAMESPC_WRITECACHE_OPTIONS', 'KEY_WRITECACHE_OPTION_ADDITIONAL'],
      type: 'string',
      info: 'Additional arguments passed through',
    },
    cache_op_mode: {
      key: ['NAMESPC_CACHE', 'KEY_CACHE_OPERATING_MODE'],
      type: 'symbol',
      values: ['writeback', 'writethrough', 'passthrough'],
      info: 'Operation mode',
      default: 'writethrough',
    },
    cache_meta_pool: {
      key: ['NAMESPC_CACHE', 'KEY_CACHE_META_POOL_NAME'],
      type: 'regex',
      value: '^[a-zA-Z0-9_][a-zA-Z0-9_-]{2,47}$',
      info: 'Name of the storage pool used for the cache metadata. If not specified, this will default to the CachePool property',
    },
    cache_meta_size: {
      key: ['NAMESPC_CACHE', 'KEY_CACHE_META_SIZE'],
      type: 'regex',
      value: '^100%|[0-9]{1,2}([.][0-9]*)?%|[1-9][0-9]{2,}$',
      info: 'Size of the cache in % (0-100) or KiB otherwise.',
      default: '12288',
    },
    cache_cache_pool: {
      key: ['NAMESPC_CACHE', 'KEY_CACHE_CACHE_POOL_NAME'],
      type: 'regex',
      value: '^[a-zA-Z0-9_][a-zA-Z0-9_-]{2,47}$',
      info: 'Name of the storage pool used for the cache cache device',
    },
    cache_cache_size: {
      key: ['NAMESPC_CACHE', 'KEY_CACHE_CACHE_SIZE'],
      type: 'regex',
      value: '^100%|[0-9]{1,2}([.][0-9]*)?%|[1-9][0-9]{2,}$',
      info: 'Size of the cache in % (0-100) or KiB otherwise.',
      default: '5%',
    },
    cache_blocksize: {
      key: ['NAMESPC_CACHE', 'KEY_CACHE_BLOCK_SIZE'],
      type: 'long',
      info: 'Block size',
      default: '4096',
    },
    cache_policy: {
      key: ['NAMESPC_CACHE', 'KEY_CACHE_POLICY'],
      type: 'symbol',
      values: ['mq', 'smq', 'cleaner'],
      info: 'Replacement policy',
      default: 'smq',
    },
    autoplacer_strat_weights_max_freespace: {
      key: ['NAMESPC_AUTOPLACER_WEIGHTS', 'KEY_AUTOPLACE_STRAT_WEIGHT_MAX_FREESPACE'],
      type: 'regex',
      value: '^[0-9]+([.][0-9]+)?',
      info: "Weight of 'MaxFreeSpace' autoplacer-strategy",
      default: '1.0',
    },
    autoplacer_strat_weights_min_reserved_space: {
      key: ['NAMESPC_AUTOPLACER_WEIGHTS', 'KEY_AUTOPLACE_STRAT_WEIGHT_MIN_RESERVED_SPACE'],
      type: 'regex',
      value: '^[0-9]+([.][0-9]+)?',
      info: "Weight of 'MinReservedSpace' autoplacer-strategy",
      default: '0.0',
    },
    autoplacer_strat_weights_min_rsc_count: {
      key: ['NAMESPC_AUTOPLACER_WEIGHTS', 'KEY_AUTOPLACE_STRAT_WEIGHT_MIN_RSC_COUNT'],
      type: 'regex',
      value: '^[0-9]+([.][0-9]+)?',
      info: "Weight of 'MinRscCount' autoplacer-strategy",
      default: '0.0',
    },
    autoplacer_strat_weights_max_throughput: {
      key: ['NAMESPC_AUTOPLACER_WEIGHTS', 'KEY_AUTOPLACE_MAX_THROUGHPUT'],
      type: 'regex',
      value: '^[0-9]+([.][0-9]+)?',
      info: "Weight of 'MaxThroughput' autoplacer-strategy",
      default: '0.0',
    },
    autoplacer_pre_select_script_filename: {
      key: ['NAMESPC_AUTOPLACER', 'KEY_AUTOPLACE_PRE_SELECT_FILE_NAME'],
      type: 'string',
      info: 'Filename of the preselection script. File must be in /etc/linstor/selector/',
    },
    autoplacer_pre_select_script_timeout: {
      key: ['NAMESPC_AUTOPLACER', 'KEY_AUTOPLACE_PRE_SELECT_SCRIPT_TIMEOUT'],
      type: 'long',
      info: 'Timeout in ms Linstor waits for the script to run.',
      default: '5000',
    },
    autoplacer_max_throughput: {
      key: ['NAMESPC_AUTOPLACER', 'KEY_AUTOPLACE_MAX_THROUGHPUT'],
      type: 'long',
      info: 'The maximum throughput the given storage pool is capable of.',
    },
    auto_snapshot_run_every: {
      key: ['NAMESPC_AUTO_SNAPSHOT', 'KEY_RUN_EVERY'],
      type: 'long',
      info: 'Runs every X minutes an snapshot-creation. Removing this property or having a value <= 0 disables auto-snapshotting.',
    },
    auto_snapshot_keep: {
      key: ['NAMESPC_AUTO_SNAPSHOT', 'KEY_KEEP'],
      type: 'long',
      info: 'Keeps the last X auto-snapshots. Removing this property or having a value <= 0 disables auto-cleanup, all auto-snapshots will be kept',
      default: '10',
    },
    auto_snapshot_next_id: {
      key: ['NAMESPC_AUTO_SNAPSHOT', 'KEY_AUTO_SNAPSHOT_NEXT_ID'],
      type: 'long',
      info: 'The next ID to try for auto-snapshots',
    },
    snapshot_shipping_run_every: {
      key: ['NAMESPC_SNAPSHOT_SHIPPING', 'KEY_RUN_EVERY'],
      type: 'long',
      info: 'Runs every X minutes an auto-snapshot-shipping unless the current snapshot-shipping is still running. In this case a new one will be started asap.',
    },
    snapshot_shipping_keep: {
      key: ['NAMESPC_SNAPSHOT_SHIPPING', 'KEY_KEEP'],
      type: 'long',
      info: 'Keeps the last X sihpped snapshots. Removing this property or having a value <= 0 disables auto-cleanup, all auto-snapshots will be kept',
      default: '10',
    },
    snapshot_shipping_target: {
      key: ['NAMESPC_SNAPSHOT_SHIPPING', 'KEY_TARGET_NODE'],
      type: 'string',
      info: 'Node name of the snapshot shipping target',
    },
    snapshot_shipping_source: {
      key: ['NAMESPC_SNAPSHOT_SHIPPING', 'KEY_SOURCE_NODE'],
      type: 'string',
      info: 'Node name of the snapshot shipping source',
    },
    snapshot_shipping_port_range: {
      key: ['NAMESPC_SNAPSHOT_SHIPPING', 'KEY_TCP_PORT_RANGE'],
      type: 'regex',
      value: '[0-9]+-[0-9]+',
      info: 'Range for allocation of snapshot shipping TCP ports',
    },
    update_cache_interval: {
      key: ['KEY_UPDATE_CACHE_INTERVAL'],
      type: 'long',
      info: 'Interval for space cache background updates in seconds',
      default: '180',
    },
  },
  objects: {
    controller: [
      'tcp_port_range',
      'minor_nr_range',
      'peer_slots_new_resource',
      'dm_stats',
      'rest_disable_http_metrics',
      'auto_evict_after_time',
      'auto_evict_max_disconnected_nodes',
      'auto_evict_min_replica_count',
      'auto_evict_allow_eviction',
      'nvme_tr_type',
      'nvme_port',
      'nvme_preferred_nic',
      'stordriver_wait_timeout_after_create',
      'sys_fs_blkio_throttle_read',
      'sys_fs_blkio_throttle_write',
      'sys_fs_blkio_throttle_read_iops',
      'sys_fs_blkio_throttle_write_iops',
      'search_domain',
      'ext_cmd_wait_to',
      'drbd_auto_quorum',
      'drbd_auto_add_quorum_tie_breaker',
      'drbd_auto_diskful',
      'drbd_auto_diskful_allow_cleanup',
      'drbd_auto_verify_algo_disable',
      'drbd_auto_verify_algo_allowed_user',
      'writecache_pool_name',
      'writecache_size',
      'writecache_opt_start_sector',
      'writecache_opt_high_watermark',
      'writecache_opt_low_watermark',
      'writecache_opt_writeback_jobs',
      'writecache_opt_autocommit_blocks',
      'writecache_opt_autocommit_time',
      'writecache_opt_fua',
      'writecache_opt_additional',
      'cache_op_mode',
      'cache_meta_pool',
      'cache_meta_size',
      'cache_cache_pool',
      'cache_cache_size',
      'cache_blocksize',
      'cache_policy',
      'stordriver_lvcreate_options',
      'stordriver_zfs_create_options',
      'storage_pool_openflex_api_host',
      'storage_pool_openflex_api_port',
      'storage_pool_openflex_user_name',
      'storage_pool_openflex_user_pw',
      'storage_pool_openflex_job_wait_delay',
      'storage_pool_openflex_job_wait_max_count',
      'storage_pool_exos_vlm_type',
      'storage_pool_exos_create_vlm_options',
      'autoplacer_strat_weights_max_freespace',
      'autoplacer_strat_weights_min_reserved_space',
      'autoplacer_strat_weights_min_rsc_count',
      'autoplacer_strat_weights_max_throughput',
      'autoplacer_pre_select_script_filename',
      'autoplacer_pre_select_script_timeout',
      'autoplacer_max_throughput',
      'proxy_auto_enable',
      'site',
      'update_cache_interval',
      'snapshot_shipping_port_range',
    ],
    node: [
      'preferred_nic',
      'storage_pool_name',
      'storage_pool_drbd_meta_name',
      'sys_fs_blkio_throttle_read',
      'sys_fs_blkio_throttle_write',
      'sys_fs_blkio_throttle_read_iops',
      'sys_fs_blkio_throttle_write_iops',
      'auto_evict_after_time',
      'auto_evict_allow_eviction',
      'writecache_pool_name',
      'writecache_size',
      'writecache_opt_start_sector',
      'writecache_opt_high_watermark',
      'writecache_opt_low_watermark',
      'writecache_opt_writeback_jobs',
      'writecache_opt_autocommit_blocks',
      'writecache_opt_autocommit_time',
      'writecache_opt_fua',
      'writecache_opt_additional',
      'cache_op_mode',
      'cache_meta_pool',
      'cache_meta_size',
      'cache_cache_pool',
      'cache_cache_size',
      'cache_blocksize',
      'cache_policy',
      'stordriver_lvcreate_options',
      'stordriver_zfs_create_options',
      'storage_pool_openflex_api_host',
      'storage_pool_openflex_api_port',
      'storage_pool_openflex_user_name',
      'storage_pool_openflex_user_pw',
      'storage_pool_openflex_stor_dev',
      'storage_pool_openflex_stor_dev_host',
      'storage_pool_openflex_job_wait_delay',
      'storage_pool_openflex_job_wait_max_count',
      'storage_pool_exos_vlm_type',
      'storage_pool_exos_create_vlm_options',
      'autoplacer_max_throughput',
      'proxy_auto_enable',
      'site',
      'drbd_auto_diskful_allow_cleanup',
    ],
    'storagepool-definition': [
      'max_oversubscription_ratio',
      'sys_fs_blkio_throttle_read',
      'sys_fs_blkio_throttle_write',
      'sys_fs_blkio_throttle_read_iops',
      'sys_fs_blkio_throttle_write_iops',
    ],
    storagepool: [
      'stordriver_pool_name',
      'stordriver_volumegroup',
      'stordriver_thinpool',
      'stordriver_zpool',
      'stordriver_zpool_thin',
      'stordriver_file_dir',
      'preferred_nic',
      'nvme_preferred_nic',
      'stordriver_lvcreate_type',
      'stordriver_lvcreate_options',
      'stordriver_zfs_create_options',
      'stordriver_wait_timeout_after_create',
      'sys_fs_blkio_throttle_read',
      'sys_fs_blkio_throttle_write',
      'sys_fs_blkio_throttle_read_iops',
      'sys_fs_blkio_throttle_write_iops',
      'storage_pool_openflex_api_host',
      'storage_pool_openflex_api_port',
      'storage_pool_openflex_user_name',
      'storage_pool_openflex_user_pw',
      'storage_pool_openflex_stor_dev',
      'storage_pool_openflex_stor_dev_host',
      'storage_pool_openflex_stor_pool',
      'storage_pool_exos_vlm_type',
      'storage_pool_exos_create_vlm_options',
      'storage_pool_exos_enclosure',
      'storage_pool_exos_pool_sn',
      'autoplacer_max_throughput',
    ],
    'resource-definition': [
      'storage_pool_name',
      'storage_pool_drbd_meta_name',
      'peer_slots_new_resource',
      'proxy_compression_type',
      'auto_evict_min_replica_count',
      'fs_type',
      'fs_mkfsparameters',
      'nvme_tr_type',
      'nvme_port',
      'stordriver_lvcreate_type',
      'stordriver_lvcreate_options',
      'stordriver_zfs_create_options',
      'sys_fs_blkio_throttle_read',
      'sys_fs_blkio_throttle_write',
      'sys_fs_blkio_throttle_read_iops',
      'sys_fs_blkio_throttle_write_iops',
      'drbd_auto_quorum',
      'drbd_auto_add_quorum_tie_breaker',
      'drbd_auto_diskful',
      'drbd_auto_diskful_allow_cleanup',
      'drbd_auto_verify_algo_disable',
      'writecache_pool_name',
      'writecache_size',
      'writecache_opt_start_sector',
      'writecache_opt_high_watermark',
      'writecache_opt_low_watermark',
      'writecache_opt_writeback_jobs',
      'writecache_opt_autocommit_blocks',
      'writecache_opt_autocommit_time',
      'writecache_opt_fua',
      'writecache_opt_additional',
      'cache_op_mode',
      'cache_meta_pool',
      'cache_meta_size',
      'cache_cache_pool',
      'cache_cache_size',
      'cache_blocksize',
      'cache_policy',
      'snapshot_shipping_source',
      'snapshot_shipping_target',
      'snapshot_shipping_run_every',
      'snapshot_shipping_keep',
      'auto_snapshot_run_every',
      'auto_snapshot_keep',
      'auto_snapshot_next_id',
      'storage_pool_exos_vlm_type',
      'storage_pool_exos_create_vlm_options',
    ],
    resource: [
      'storage_pool_name',
      'storage_pool_drbd_meta_name',
      'preferred_nic',
      'peer_slots',
      'fs_type',
      'fs_mkfsparameters',
      'nvme_preferred_nic',
      'sys_fs_blkio_throttle_read',
      'sys_fs_blkio_throttle_write',
      'sys_fs_blkio_throttle_read_iops',
      'sys_fs_blkio_throttle_write_iops',
      'drbd_auto_diskful_allow_cleanup',
      'storage_pool_exos_create_vlm_options',
    ],
    'volume-definition': [
      'storage_pool_name',
      'storage_pool_drbd_meta_name',
      'override_vlm_id',
      'fs_type',
      'fs_mkfsparameters',
      'stordriver_lvcreate_type',
      'stordriver_lvcreate_options',
      'stordriver_zfs_create_options',
      'drbd_current_gi',
      'sys_fs_blkio_throttle_read',
      'sys_fs_blkio_throttle_write',
      'sys_fs_blkio_throttle_read_iops',
      'sys_fs_blkio_throttle_write_iops',
      'writecache_pool_name',
      'writecache_size',
      'writecache_opt_start_sector',
      'writecache_opt_high_watermark',
      'writecache_opt_low_watermark',
      'writecache_opt_writeback_jobs',
      'writecache_opt_autocommit_blocks',
      'writecache_opt_autocommit_time',
      'writecache_opt_fua',
      'writecache_opt_additional',
      'cache_op_mode',
      'cache_meta_pool',
      'cache_meta_size',
      'cache_cache_pool',
      'cache_cache_size',
      'cache_blocksize',
      'cache_policy',
      'storage_pool_exos_vlm_type',
      'storage_pool_exos_create_vlm_options',
    ],
    volume: [
      'storage_pool_name',
      'storage_pool_drbd_meta_name',
      'sys_fs_blkio_throttle_read',
      'sys_fs_blkio_throttle_write',
      'sys_fs_blkio_throttle_read_iops',
      'sys_fs_blkio_throttle_write_iops',
    ],
    'drbd-proxy': [
      'proxy_memlimit',
      'proxy_read_loops',
      'proxy_sndbuf_size',
      'proxy_rcvbuf_size',
      'proxy_ping_timeout',
    ],
    'drbd-proxy-zlib': ['proxy_compression_zlib_level'],
    'drbd-proxy-lzma': [
      'proxy_compression_lzma_dict_size',
      'proxy_compression_lzma_lc',
      'proxy_compression_lzma_lp',
      'proxy_compression_lzma_pb',
      'proxy_compression_lzma_nice_len',
      'proxy_compression_lzma_mf',
      'proxy_compression_lzma_mode',
      'proxy_compression_lzma_depth',
      'proxy_compression_lzma_level',
      'proxy_compression_lzma_contexts',
      'proxy_compression_lzma_fallback_to_zlib',
      'proxy_compression_lzma_numa_threshold',
    ],
    'drbd-proxy-zstd': ['proxy_compression_zstd_level'],
  },
};
